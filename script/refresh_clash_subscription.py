import asyncio
from datetime import timedelta
from re import search
from typing import List, Tuple

import yaml
from loguru import logger
from pydantic import BaseModel

from components import redis
from components.config import async_load_yaml_config
from components.monitor import monitor
from components.requests import close_requests, get, register_requests
from components.retry import retry
from setting import setting


class Proxies(BaseModel):
    proxies: List[dict]
    proxy_names: List[str]
    proxy_names_of_high_speed_special_line: List[str]
    proxy_names_of_hk_node: List[str]
    proxy_names_of_us_node: List[str]
    proxy_names_of_jp_node: List[str]
    proxy_names_of_kr_node: List[str]
    proxy_names_of_tw_node: List[str]


def node_name_matches_country(node_name: str) -> Tuple:  # noqa: C901
    if search(r"(AR|ÈòøÊ†πÂª∑)", node_name):
        return f"üá¶üá∑ {node_name}", "AR"
    if search(r"(AT|Â••Âú∞Âà©|Áª¥‰πüÁ∫≥)", node_name):
        return f"üá¶üáπ {node_name}", "AT"
    if search(r"(AU|Australia|Sydney|Êæ≥Â§ßÂà©‰∫ö|ÊÇâÂ∞º)", node_name):
        return f"üá¶üá∫ {node_name}", "AU"
    if search(r"(BE|ÊØîÂà©Êó∂)", node_name):
        return f"üáßüá™ {node_name}", "BE"
    if search(r"(BR|Brazil|Â∑¥Ë•ø|Âú£‰øùÁΩó)", node_name):
        return f"üáßüá∑ {node_name}", "BR"
    if search(r"(CA|Canada|Âä†ÊãøÂ§ß|ËíôÁâπÂà©Â∞î|Ê∏©Âì•Âçé|Ê•ìËëâ|Êû´Âè∂)", node_name):
        return f"üá®üá¶ {node_name}", "CA"
    if search(r"(CH|ÁëûÂ£´|ËãèÈªé‰∏ñ)", node_name):
        return f"üá®üá≠ {node_name}", "CH"
    if search(r"(DE|Germany|Âæ∑ÂõΩ|Ê≥ïÂÖ∞ÂÖãÁ¶è|Âæ∑)", node_name):
        return f"üá©üá™ {node_name}", "DE"
    if search(r"(DK|‰∏πÈ∫¶)", node_name):
        return f"üá©üá∞ {node_name}", "DK"
    if search(r"(ES|Ë•øÁè≠Áâô)", node_name):
        return f"üá™üá∏ {node_name}", "ES"
    if search(r"EU", node_name):
        return f"üá™üá∫ {node_name}", "EU"
    if search(r"(FI|Finland|Ëä¨ÂÖ∞|Ëµ´Â∞îËæõÂü∫)", node_name):
        return f"üá´üáÆ {node_name}", "FI"
    if search(r"(FR|France|Ê≥ïÂõΩ|Â∑¥Èªé)", node_name):
        return f"üá´üá∑ {node_name}", "FR"
    if search(r"(UK|England|UnitedKingdom|Ëã±ÂõΩ|Ëã±|‰º¶Êï¶)", node_name):
        return f"üá¨üáß {node_name}", "UK"
    if search(r"(HK|HongKong|È¶ôÊ∏Ø|Ê∑±Ê∏Ø|Ê≤™Ê∏Ø|ÂëºÊ∏Ø|HKT|HKBN|HGC|WTT|CMI|Á©óÊ∏Ø|‰∫¨Ê∏Ø|Ê∏Ø)", node_name):
        return f"üá≠üá∞ {node_name}", "HK"
    if search(r"(ID|Indonesia|Âç∞Â∞º|Âç∞Â∫¶Â∞ºË•ø‰∫ö|ÈõÖÂä†Ëææ)", node_name):
        return f"üáÆüá© {node_name}", "ID"
    if search(r"(IE|Ireland|Áà±Â∞îÂÖ∞|ÈÉΩÊüèÊûó)", node_name):
        return f"üáÆüá™ {node_name}", "IE"
    if search(r"(IN|India|Âç∞Â∫¶|Â≠ü‰π∞)", node_name):
        return f"üáÆüá≥ {node_name}", "IN"
    if search(r"(IT|Italy|ÊÑèÂ§ßÂà©|Á±≥ÂÖ∞)", node_name):
        return f"üáÆüáπ {node_name}", "IT"
    if search(r"(JP|Japan|Êó•Êú¨|‰∏ú‰∫¨|Â§ßÈò™|ÂüºÁéâ|Ê≤™Êó•|Á©óÊó•|Â∑ùÊó•|‰∏≠Êó•|Ê≥âÊó•|Êù≠Êó•)", node_name):
        return f"üáØüáµ {node_name}", "JP"
    if search(r"(KP|ÊúùÈ≤ú)", node_name):
        return f"üá∞üáµ {node_name}", "KP"
    if search(r"(KR|Korea|KOR|Èü©ÂõΩ|È¶ñÂ∞î|Èü©|Èüì)", node_name):
        return f"üá∞üá∑ {node_name}", "KR"
    if search(r"(MO|Macao|Êæ≥Èó®|CTM)", node_name):
        return f"üá≤üá¥ {node_name}", "MO"
    if search(r"(MY|Malaysia|È©¨Êù•Ë•ø‰∫ö)", node_name):
        return f"üá≤üáæ {node_name}", "MY"
    if search(r"(NL|Netherlands|Ëç∑ÂÖ∞|ÈòøÂßÜÊñØÁâπ‰∏π)", node_name):
        return f"üá≥üá± {node_name}", "NL"
    if search(r"(PH|Philippines|Ëè≤ÂæãÂÆæ)", node_name):
        return f"üáµüá≠ {node_name}", "PH"
    if search(r"(RO|ÁΩóÈ©¨Â∞º‰∫ö)", node_name):
        return f"üá∑üá¥ {node_name}", "RO"
    if search(r"(RU|Russia|‰øÑÁΩóÊñØ|‰ºØÂäõ|Ëé´ÊñØÁßë|Âú£ÂΩºÂæóÂ†°|Ë•ø‰ºØÂà©‰∫ö|Êñ∞Ë•ø‰ºØÂà©‰∫ö|‰∫¨‰øÑ|Êù≠‰øÑ)", node_name):
        return f"üá∑üá∫ {node_name}", "RU"
    if search(r"(SA|Ê≤ôÁâπ|Ëø™Êãú)", node_name):
        return f"üá∏üá¶ {node_name}", "SA"
    if search(r"(SE|Sweden)", node_name):
        return f"üá∏üá™ {node_name}", "SE"
    if search(r"(SG|Singapore|Êñ∞Âä†Âù°|ÁãÆÂüé|Ê≤™Êñ∞|‰∫¨Êñ∞|Ê≥âÊñ∞|Á©óÊñ∞|Ê∑±Êñ∞|Êù≠Êñ∞)", node_name):
        return f"üá∏üá¨ {node_name}", "SG"
    if search(r"(TH|Thailand|Ê≥∞ÂõΩ|ÊõºË∞∑)", node_name):
        return f"üáπüá≠ {node_name}", "TH"
    if search(r"(TR|Turkey|ÂúüËÄ≥ÂÖ∂|‰ºäÊñØÂù¶Â∏ÉÂ∞î)", node_name):
        return f"üáπüá∑ {node_name}", "TR"
    if search(r"(PK|Pakistan|Â∑¥Âü∫ÊñØÂù¶)", node_name):
        return f"üáµüá∞ {node_name}", "PK"
    if search(
        r"(US|America|UnitedStates|ÁæéÂõΩ|Áæé|‰∫¨Áæé|Ê≥¢ÁâπÂÖ∞|ËææÊãâÊñØ|‰øÑÂãíÂÜà|Âá§Âá∞Âüé|Ë¥πÂà©Ëíô|Á°ÖË∞∑|ÊãâÊñØÁª¥Âä†ÊñØ|Ê¥õÊùâÁü∂|Âú£‰ΩïÂ°û|Âú£ÂÖãÊãâÊãâ|Ë•øÈõÖÂõæ|ËäùÂä†Âì•|Ê≤™Áæé)",  # noqa: E501
        node_name,
    ):
        return f"üá∫üá≤ {node_name}", "US"
    if search(r"(VN|Ë∂äÂçó)", node_name):
        return f"üáªüá≥ {node_name}", "VN"
    if search(r"(ZA|ÂçóÈùû)", node_name):
        return f"üáøüá¶ {node_name}", "ZA"
    if search(r"(TW|Taiwan|Âè∞Êπæ|Âè∞Âåó|Âè∞‰∏≠|Êñ∞Âåó|ÂΩ∞Âåñ|CHT|Âè∞|HINET)", node_name):
        return f"üá®üá≥ {node_name}", "TW"
    if search(r"(CN|China|ÂõûÂõΩ|‰∏≠ÂõΩ|Ê±üËãè|Âåó‰∫¨|‰∏äÊµ∑|ÂπøÂ∑û|Ê∑±Âú≥|Êù≠Â∑û|Â∏∏Â∑û|ÂæêÂ∑û|ÈùíÂ≤õ|ÂÆÅÊ≥¢|ÈïáÊ±ü|back)", node_name):
        return f"üá®üá≥ {node_name}", "CN"

    raise ValueError(f"clash Âú∞Âå∫ÂåπÈÖçÂ§±Ë¥• -> {node_name}")


@retry(retries=5)
async def get_clash_proxies() -> Proxies:
    proxy_names = []
    proxy_names_of_high_speed_special_line = []
    proxy_names_of_hk_node = []
    proxy_names_of_us_node = []
    proxy_names_of_jp_node = []
    proxy_names_of_kr_node = []
    proxy_names_of_tw_node = []

    rsp = await get(setting.clash)
    assert rsp.ok, f"clash ËÆ¢ÈòÖËé∑ÂèñÂ§±Ë¥•, {rsp.status_code}"

    rdb = redis.client()
    user_info = rsp.headers.get("subscription-userinfo")
    if user_info is not None:
        logger.info("subscription user info: {}", user_info)
        await rdb.set("subscription:user:info", user_info, ex=timedelta(hours=1))

    proxies: List[dict] = yaml.safe_load(rsp.text).get("proxies", [])
    for proxy in proxies:
        try:
            node_name, country = node_name_matches_country(proxy["name"])
        except ValueError as e:
            logger.warning(e)
            continue

        node_name = node_name.replace("‰∏≠Áªß", "‰∏≠ËΩ¨")
        node_name = node_name.replace("AIA", "ËÖæËÆØÂÜÖÁΩë")
        proxy["name"] = node_name
        proxy_names.append(node_name)
        if country == "HK":
            if "‰∏ìÁ∫ø" in node_name or "ËÖæËÆØÂÜÖÁΩë" in node_name:
                proxy_names_of_high_speed_special_line.append(node_name)
            proxy_names_of_hk_node.append(node_name)
        # elif country == "SG":
        #     if "‰∏ìÁ∫ø" in node_name or "ËÖæËÆØÂÜÖÁΩë" in node_name:
        #         proxy_names_of_high_speed_special_line.append(node_name)
        elif country == "US":
            proxy_names_of_us_node.append(node_name)
        elif country == "JP":
            proxy_names_of_jp_node.append(node_name)
        elif country == "KR":
            proxy_names_of_kr_node.append(node_name)
        elif country == "TW":
            proxy_names_of_tw_node.append(node_name)

    return Proxies(
        proxies=proxies,
        proxy_names=proxy_names,
        proxy_names_of_high_speed_special_line=proxy_names_of_high_speed_special_line,
        proxy_names_of_hk_node=proxy_names_of_hk_node,
        proxy_names_of_us_node=proxy_names_of_us_node,
        proxy_names_of_jp_node=proxy_names_of_jp_node,
        proxy_names_of_kr_node=proxy_names_of_kr_node,
        proxy_names_of_tw_node=proxy_names_of_tw_node,
    )


@monitor
async def refresh_clash_subscription():
    logger.info("start refreshing the subscription of clash")
    proxies = await get_clash_proxies()
    clash = await async_load_yaml_config("../config/clash.yaml")

    clash["proxies"] = proxies.proxies
    clash["proxy-groups"][1]["proxies"].extend(proxies.proxy_names)
    clash["proxy-groups"][2]["proxies"].extend(proxies.proxy_names_of_high_speed_special_line)
    clash["proxy-groups"][3]["proxies"].extend(proxies.proxy_names)
    clash["proxy-groups"][4]["proxies"].extend(proxies.proxy_names)
    clash["proxy-groups"][5]["proxies"].extend(proxies.proxy_names)

    clash["proxy-groups"][25]["proxies"].extend(proxies.proxy_names_of_hk_node)
    clash["proxy-groups"][26]["proxies"].extend(proxies.proxy_names_of_tw_node)
    clash["proxy-groups"][27]["proxies"].extend(proxies.proxy_names_of_us_node)
    clash["proxy-groups"][28]["proxies"].extend(proxies.proxy_names_of_jp_node)
    clash["proxy-groups"][29]["proxies"].extend(proxies.proxy_names_of_kr_node)

    clash_yaml = yaml.safe_dump(clash, allow_unicode=True, width=800, sort_keys=False)
    rdb = redis.client()
    await rdb.set("subscription:clash", clash_yaml, ex=timedelta(hours=1))
    logger.info("refresh clash subscription successful")


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(redis.register_redis())
    loop.run_until_complete(register_requests())
    loop.run_until_complete(refresh_clash_subscription())
    loop.run_until_complete(close_requests())
